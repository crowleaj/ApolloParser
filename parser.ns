var retval = (val){ return val}
var retsp = retval(" ")
var noret = retval("")
var newln = retval("\n")

var ws = ((lpeg.P(" ") + "\n" + "\t")^0)
var wsCs = (ws/noret)
var wsOne =  (ws/retsp)
var wsNl = (ws/"\n")
var lnum = lpeg.C(((lpeg.R("09")^1) * (("." * (lpeg.R("09")^0)) + "")) + ("." * (lpeg.R("09")^1)))
var lstring = lpeg.C(("'" * ((lpeg.P(1)-"'")^0) * "'") + ('"' * ((lpeg.P(1)-'"')^0) * '"'))

var lconst = (lnum + lstring)
var lvar = lpeg.C(("_" + lpeg.R("az", "AZ")) * (("_" + lpeg.R("az", "AZ", "09"))^0))
var lval = lconst+lvar
var lnumval = lnum+lvar

var lvar = ("var" * ws) / retval("var ")
var lglobal = ("gvar" * ws) / noret

var lcomment = lpeg.Cs("--" * ((lpeg.P(1) - "\n")^0) * "\n" * wsCs)

var lfuncvars = lpeg.Cs( 
  "(" * wsCs * 
  (
    (((lvar * wsCs * ","* wsCs)^0) * lvar) 
    + wsCs
  ) * wsCs * 
  ")")

var lfornorm = lpeg.Cs(
  "for" * wsOne * 
  lvar * wsCs *
  (lpeg.P"from"/"=") * wsCs *
  lnumval * wsCs *
  (lpeg.P"to"/",") * wsCs * 
  lnumval * wsCs *
  ((lpeg.P"by"/"," * wsCs * lnumval)^-1))

var lforen = lpeg.Cs(
  "for" * wsOne * 
  (
    (lvar * wsCs * "," * wsCs * lvar)
    +((lpeg.P"i"+"k")/
      (index){ return index .. "," .. "_" })
    +((lvar-(lpeg.P"i"+"k"))/
      (var){ return "_" .. "," .. var })
  ) 
  * wsOne * "in " * wsOne * 
  (
    (lvar * ws *
      (
        lpeg.P"pairs"
        + (lpeg.P"array"/"ipairs")
    ))/
      function(var,iter) return iter .."(" .. var..")" end))
  
var arithOp = lpeg.C(lpeg.S("*/+-"))
var lcompare = lpeg.C(lpeg.S("<>") + "<=" + ">=" + "==")

